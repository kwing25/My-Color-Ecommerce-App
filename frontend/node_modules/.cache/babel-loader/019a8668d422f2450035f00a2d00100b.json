{"ast":null,"code":"var html = require('@cloudinary/html');\n\nvar React = require('react');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar version = \"1.0.1\";\nvar SDKAnalyticsConstants = {\n  sdkSemver: version,\n  techVersion: React__default[\"default\"].version,\n  sdkCode: 'J'\n};\nvar _excluded$1 = [\"cldImg\", \"plugins\"];\n/**\r\n * @mixin ReactSDK\r\n * @description The Cloudinary React SDK contains components like \\<AdvancedImage\\> to easily render your media assets from Cloudinary.\r\n * The SDK also comes with support for optional JS plugins that make the components smart, with features like lazy loading, placeholder, accessibility & responsiveness.\r\n *\r\n * @example\r\n * <caption>\r\n *  Please note that the order of the plugins is important. See {@link https://cloudinary.com/documentation/sdks/js/frontend-frameworks/index.html#plugin-order|Plugin Order} for more details.\r\n * </caption>\r\n * // Example\r\n * import {CloudinaryImage} from \"@cloudinary/url-gen/assets/CloudinaryImage\";\r\n * import {\r\n *  AdvancedImage,\r\n *  accessibility,\r\n *  responsive,\r\n *  lazyload,\r\n *  placeholder\r\n * } from '@cloudinary/react';\r\n *\r\n * const App = () => {\r\n *\r\n * const myCld = new Cloudinary({ cloudName: 'demo'});\r\n * let img = myCld().image('sample');\r\n *\r\n *   return (\r\n *      <div>\r\n *         <div style={{height: \"1000px\"}}/>\r\n *         <AdvancedImage\r\n *            cldImg={img}\r\n *            plugins={[lazyload(), responsive(100), placeholder()]}\r\n *         />\r\n *      </div>\r\n *   )\r\n * };\r\n *\r\n *\r\n *\r\n *\r\n *\r\n */\n\n/**\r\n * @memberOf ReactSDK\r\n * @type {Component}\r\n * @description The Cloudinary image component.\r\n * @prop {CloudinaryImage} cldImg Generated by @cloudinary/url-gen\r\n * @prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()\r\n */\n\nvar AdvancedImage = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(AdvancedImage, _React$Component);\n\n  function AdvancedImage(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.imageRef = /*#__PURE__*/React__default[\"default\"].createRef();\n    return _this;\n  }\n  /**\r\n   * On mount, creates a new HTMLLayer instance and initializes with ref to img element,\r\n   * user generated cloudinaryImage and the plugins to be used.\r\n   */\n\n\n  var _proto = AdvancedImage.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.htmlLayerInstance = new html.HtmlImageLayer(this.imageRef.current, this.props.cldImg, this.props.plugins, SDKAnalyticsConstants);\n  }\n  /**\r\n   * On update, we cancel running plugins and update image instance with the state of user\r\n   * cloudinaryImage and the state of plugins.\r\n   */\n  ;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    html.cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState); // call html layer to update the dom again with plugins and reset toBeCanceled\n\n    this.htmlLayerInstance.update(this.props.cldImg, this.props.plugins, SDKAnalyticsConstants);\n  }\n  /**\r\n   * On unmount, we cancel the currently running plugins.\r\n   */\n  ;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    // Safely cancel running events on unmount.\n    html.cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, _excluded$1);\n\n    if (html.isBrowser()) {\n      // On client side render\n      return /*#__PURE__*/React__default[\"default\"].createElement(\"img\", Object.assign({\n        suppressHydrationWarning: true\n      }, otherProps, {\n        ref: this.imageRef\n      }));\n    } else {\n      // on server side render\n      var src = html.serverSideSrc(this.props.plugins, this.props.cldImg);\n      return /*#__PURE__*/React__default[\"default\"].createElement(\"img\", Object.assign({}, otherProps, {\n        src: src\n      }));\n    }\n  };\n\n  return AdvancedImage;\n}(React__default[\"default\"].Component);\n\nvar _excluded = [\"cldVid\", \"plugins\", \"sources\", \"innerRef\"];\nvar VIDEO_ATTRIBUTES_KEYS = ['controls', 'loop', 'muted', 'poster', 'preload', 'autoplay', 'playsinline'];\n/**\r\n * @memberOf ReactSDK\r\n * @type {Component}\r\n * @description The Cloudinary video component.\r\n * @prop {CloudinaryVideo} transformation Generated by @cloudinary/url-gen\r\n * @prop {Plugins} plugins Advanced image component plugins lazyload()\r\n * @prop videoAttributes Optional attributes include controls, loop, muted, poster, preload, autoplay\r\n * @prop videoEvents Optional video events include play, loadstart, playing, error, ended\r\n * @prop {VideoSources} sources Optional sources to generate\r\n * @example\r\n *  <caption>\r\n *  Using custom defined resources.\r\n * </caption>\r\n * const vid = new CloudinaryVideo('dog', {cloudName: 'demo'});\r\n * const videoEl = useRef();\r\n * const sources = [\r\n *  {\r\n *    type: 'mp4',\r\n *    codecs: ['vp8', 'vorbis'],\r\n *    transcode: videoCodec(auto())\r\n *  },\r\n *  {\r\n *    type: 'webm',\r\n *    codecs: ['avc1.4D401E', 'mp4a.40.2'],\r\n *    videoCodec: videoCodec(auto())\r\n *  }];\r\n *\r\n * return <AdvancedVideo cldVid={vid} sources={sources} ref={videoEl} controls />\r\n */\n\nvar AdvancedVideo = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(AdvancedVideo, _Component);\n\n  function AdvancedVideo(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.videoRef = /*#__PURE__*/React.createRef();\n    _this.attachRef = _this.attachRef.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\r\n   * On mount, creates a new HTMLVideoLayer instance and initializes with ref to video element,\r\n   * user generated cloudinaryVideo and the plugins to be used.\r\n   */\n\n\n  var _proto = AdvancedVideo.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.htmlVideoLayerInstance = new html.HtmlVideoLayer(this.videoRef && this.videoRef.current, this.props.cldVid, this.props.sources, this.props.plugins, this.getVideoAttributes());\n  }\n  /**\r\n   * On update, we cancel running plugins and update the video instance if the src\r\n   * was changed.\r\n   */\n  ;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    html.cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState); // call html layer to update the dom again with plugins and reset toBeCanceled\n\n    this.htmlVideoLayerInstance.update(this.props.cldVid, this.props.sources, this.props.plugins, this.getVideoAttributes());\n  }\n  /**\r\n   * On unmount, we cancel the currently running plugins.\r\n   */\n  ;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    // safely cancel running events on unmount\n    html.cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);\n  }\n  /**\r\n   * Returns video attributes.\r\n   */\n  ;\n\n  _proto.getVideoAttributes = function getVideoAttributes() {\n    var _this2 = this;\n\n    var result = {};\n    VIDEO_ATTRIBUTES_KEYS.forEach(function (key) {\n      if (key in _this2.props) {\n        result[key] = _this2.props[key];\n      }\n    });\n    return result;\n  }\n  /**\r\n   * Attach both this.videoRef and props.innerRef as ref to the given element.\r\n   * @param element - the element to attach a ref to\r\n   */\n  ;\n\n  _proto.attachRef = function attachRef(element) {\n    this.videoRef.current = element;\n    var innerRef = this.props.innerRef;\n\n    if (innerRef) {\n      if (innerRef instanceof Function) {\n        innerRef(element);\n      } else {\n        innerRef.current = element;\n      }\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        videoEvents = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"video\", Object.assign({}, videoEvents, {\n      ref: this.attachRef\n    }));\n  };\n\n  return AdvancedVideo;\n}(React.Component);\n\nObject.defineProperty(exports, 'accessibility', {\n  enumerable: true,\n  get: function () {\n    return html.accessibility;\n  }\n});\nObject.defineProperty(exports, 'lazyload', {\n  enumerable: true,\n  get: function () {\n    return html.lazyload;\n  }\n});\nObject.defineProperty(exports, 'placeholder', {\n  enumerable: true,\n  get: function () {\n    return html.placeholder;\n  }\n});\nObject.defineProperty(exports, 'responsive', {\n  enumerable: true,\n  get: function () {\n    return html.responsive;\n  }\n});\nexports.AdvancedImage = AdvancedImage;\nexports.AdvancedVideo = AdvancedVideo;","map":{"version":3,"sources":["/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/My-Color-Ecommerce-App/frontend/node_modules/@cloudinary/src/internal/SDKAnalyticsConstants.ts","/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/My-Color-Ecommerce-App/frontend/node_modules/@cloudinary/src/AdvancedImage.tsx","/Users/kendrawing/Documents/Coding Projects:Practice/1 Repos:Deployed/My-Color-Ecommerce-App/frontend/node_modules/@cloudinary/src/AdvancedVideo.tsx"],"names":["SDKAnalyticsConstants","sdkSemver","techVersion","React","sdkCode","AdvancedImage","Component","componentDidMount","HtmlImageLayer","componentDidUpdate","cancelCurrentlyRunningPlugins","componentWillUnmount","render","otherProps","isBrowser","suppressHydrationWarning","ref","imageRef","src","serverSideSrc","VIDEO_ATTRIBUTES_KEYS","AdvancedVideo","createRef","HtmlVideoLayer","getVideoAttributes","result","key","attachRef","innerRef","videoEvents"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { version } from '../../package.json';\n\nexport const SDKAnalyticsConstants = {\n  sdkSemver: version,\n  techVersion: React.version,\n  sdkCode: 'J'\n};\n","import React from 'react';\nimport { CloudinaryImage } from '@cloudinary/url-gen/assets/CloudinaryImage';\n\nimport {\n  HtmlImageLayer,\n  Plugins,\n  isBrowser,\n  serverSideSrc,\n  cancelCurrentlyRunningPlugins\n} from '@cloudinary/html'\nimport {SDKAnalyticsConstants} from \"./internal/SDKAnalyticsConstants\";\n\ninterface ImgProps {\n  cldImg: CloudinaryImage,\n  plugins?: Plugins,\n  [x: string]: any\n}\n\n/**\n * @mixin ReactSDK\n * @description The Cloudinary React SDK contains components like \\<AdvancedImage\\> to easily render your media assets from Cloudinary.\n * The SDK also comes with support for optional JS plugins that make the components smart, with features like lazy loading, placeholder, accessibility & responsiveness.\n *\n * @example\n * <caption>\n *  Please note that the order of the plugins is important. See {@link https://cloudinary.com/documentation/sdks/js/frontend-frameworks/index.html#plugin-order|Plugin Order} for more details.\n * </caption>\n * // Example\n * import {CloudinaryImage} from \"@cloudinary/url-gen/assets/CloudinaryImage\";\n * import {\n *  AdvancedImage,\n *  accessibility,\n *  responsive,\n *  lazyload,\n *  placeholder\n * } from '@cloudinary/react';\n *\n * const App = () => {\n *\n * const myCld = new Cloudinary({ cloudName: 'demo'});\n * let img = myCld().image('sample');\n *\n *   return (\n *      <div>\n *         <div style={{height: \"1000px\"}}/>\n *         <AdvancedImage\n *            cldImg={img}\n *            plugins={[lazyload(), responsive(100), placeholder()]}\n *         />\n *      </div>\n *   )\n * };\n *\n *\n *\n *\n *\n */\n\n/**\n * @memberOf ReactSDK\n * @type {Component}\n * @description The Cloudinary image component.\n * @prop {CloudinaryImage} cldImg Generated by @cloudinary/url-gen\n * @prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()\n */\nclass AdvancedImage extends React.Component <ImgProps> {\n  imageRef: React.RefObject<HTMLImageElement>;\n  htmlLayerInstance: HtmlImageLayer;\n\n  constructor(props: ImgProps) {\n    super(props);\n    this.imageRef = React.createRef();\n  }\n\n  /**\n   * On mount, creates a new HTMLLayer instance and initializes with ref to img element,\n   * user generated cloudinaryImage and the plugins to be used.\n   */\n  componentDidMount() {\n    this.htmlLayerInstance = new HtmlImageLayer(\n      this.imageRef.current,\n      this.props.cldImg,\n      this.props.plugins,\n      SDKAnalyticsConstants\n    )\n  }\n\n  /**\n   * On update, we cancel running plugins and update image instance with the state of user\n   * cloudinaryImage and the state of plugins.\n   */\n  componentDidUpdate() {\n    cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);\n    // call html layer to update the dom again with plugins and reset toBeCanceled\n    this.htmlLayerInstance.update(this.props.cldImg, this.props.plugins, SDKAnalyticsConstants)\n  }\n\n  /**\n   * On unmount, we cancel the currently running plugins.\n   */\n  componentWillUnmount() {\n    // Safely cancel running events on unmount.\n    cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);\n  }\n\n  render() {\n    const {\n      cldImg,\n      plugins,\n      ...otherProps // Assume any other props are for the base element\n    } = this.props;\n    if (isBrowser()) { // On client side render\n      return <img suppressHydrationWarning {...otherProps} ref={this.imageRef} />\n    } else { // on server side render\n      const src = serverSideSrc(\n        this.props.plugins,\n        this.props.cldImg\n      );\n      return <img {...otherProps} src={src} />\n    }\n  }\n}\n\nexport { AdvancedImage };\n","import React, { Component, createRef, EventHandler, MutableRefObject, SyntheticEvent } from 'react';\nimport { CloudinaryVideo } from '@cloudinary/url-gen';\n\nimport {\n  HtmlVideoLayer,\n  Plugins,\n  VideoSources,\n  cancelCurrentlyRunningPlugins\n} from '@cloudinary/html';\n\ntype ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\ninterface VideoProps {\n  cldVid: CloudinaryVideo,\n  plugins?: Plugins,\n  sources?: VideoSources,\n  innerRef?: ((instance: any) => void) | MutableRefObject<unknown> | null\n\n  // supported video attributes\n  controls?: boolean\n  loop?: boolean,\n  muted?: boolean,\n  poster?: string,\n  preload?: string,\n  autoPlay?: boolean,\n  playsInline?: boolean\n\n  // supported video events\n  onPlay?: ReactEventHandler<any>,\n  onLoadStart?: ReactEventHandler<any>,\n  onPlaying?: ReactEventHandler<any>,\n  onError?: ReactEventHandler<any>,\n  onEnded?: ReactEventHandler<any>\n}\n\nconst VIDEO_ATTRIBUTES_KEYS: string[] = ['controls', 'loop', 'muted', 'poster', 'preload', 'autoplay', 'playsinline'];\n\n/**\n * @memberOf ReactSDK\n * @type {Component}\n * @description The Cloudinary video component.\n * @prop {CloudinaryVideo} transformation Generated by @cloudinary/url-gen\n * @prop {Plugins} plugins Advanced image component plugins lazyload()\n * @prop videoAttributes Optional attributes include controls, loop, muted, poster, preload, autoplay\n * @prop videoEvents Optional video events include play, loadstart, playing, error, ended\n * @prop {VideoSources} sources Optional sources to generate\n * @example\n *  <caption>\n *  Using custom defined resources.\n * </caption>\n * const vid = new CloudinaryVideo('dog', {cloudName: 'demo'});\n * const videoEl = useRef();\n * const sources = [\n *  {\n *    type: 'mp4',\n *    codecs: ['vp8', 'vorbis'],\n *    transcode: videoCodec(auto())\n *  },\n *  {\n *    type: 'webm',\n *    codecs: ['avc1.4D401E', 'mp4a.40.2'],\n *    videoCodec: videoCodec(auto())\n *  }];\n *\n * return <AdvancedVideo cldVid={vid} sources={sources} ref={videoEl} controls />\n */\nclass AdvancedVideo extends Component <VideoProps> {\n  videoRef: MutableRefObject<HTMLVideoElement | null>\n  htmlVideoLayerInstance: HtmlVideoLayer;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.videoRef = createRef();\n    this.attachRef = this.attachRef.bind(this);\n  }\n\n  /**\n   * On mount, creates a new HTMLVideoLayer instance and initializes with ref to video element,\n   * user generated cloudinaryVideo and the plugins to be used.\n   */\n  componentDidMount() {\n    this.htmlVideoLayerInstance = new HtmlVideoLayer(\n      this.videoRef && this.videoRef.current,\n      this.props.cldVid,\n      this.props.sources,\n      this.props.plugins,\n      this.getVideoAttributes()\n    )\n  }\n\n  /**\n   * On update, we cancel running plugins and update the video instance if the src\n   * was changed.\n   */\n  componentDidUpdate() {\n    cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);\n    // call html layer to update the dom again with plugins and reset toBeCanceled\n    this.htmlVideoLayerInstance.update(this.props.cldVid, this.props.sources, this.props.plugins, this.getVideoAttributes())\n  }\n\n  /**\n   * On unmount, we cancel the currently running plugins.\n   */\n  componentWillUnmount() {\n    // safely cancel running events on unmount\n    cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState)\n  }\n\n  /**\n   * Returns video attributes.\n   */\n  getVideoAttributes() {\n    const result = {};\n    VIDEO_ATTRIBUTES_KEYS.forEach((key: string) => {\n      if (key in this.props) {\n        result[key] = this.props[key];\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Attach both this.videoRef and props.innerRef as ref to the given element.\n   * @param element - the element to attach a ref to\n   */\n  attachRef(element: HTMLVideoElement) {\n    this.videoRef.current = element;\n    const { innerRef } = this.props;\n\n    if (innerRef) {\n      if (innerRef instanceof Function) {\n        innerRef(element);\n      } else {\n        innerRef.current = element;\n      }\n    }\n  };\n\n  render() {\n    const {\n      cldVid,\n      plugins,\n      sources,\n      innerRef,\n      ...videoEvents // Assume any other props are for the base element\n    } = this.props;\n\n    return <video {...videoEvents} ref={this.attachRef} />\n  }\n}\n\nexport { AdvancedVideo };\n"]},"metadata":{},"sourceType":"script"}